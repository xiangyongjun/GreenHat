using System.Collections.Generic;
using System;
using System.Linq;

public class MalwareClassifier
{
    private static readonly Dictionary<string, (HashSet<string> Functions, int[] Weights)> Signatures =
        new Dictionary<string, (HashSet<string>, int[])>(StringComparer.OrdinalIgnoreCase)
        {
            // 木马类家族（前缀Trojan.）
            ["Trojan.AgentTesla"] = (new HashSet<string> { "GetAsyncKeyState", "InternetWriteFile", "GetWindowText", "SetWindowsHook" }, new[] { 5, 4, 4, 4 }),
            ["Trojan.QakBot"] = (new HashSet<string> { "HttpSendRequest", "GetAsyncKeyState", "SHGetSpecialFolderPath", "FindResource" }, new[] { 5, 4, 4, 3 }),
            ["Trojan.Emotet"] = (new HashSet<string> { "SHGetFolderPath", "CopyFile", "MoveFile", "ShellExecute" }, new[] { 5, 4, 4, 3 }),
            ["Trojan.TrickBot"] = (new HashSet<string> { "NetUserAdd", "NetLocalGroupAddMembers", "CryptHashData", "URLDownloadToFile" }, new[] { 5, 4, 4, 4 }),
            ["Trojan.DarkTracer"] = (new HashSet<string> { "RegSetValue", "CreateService", "WriteFile", "CreateRemoteThread" }, new[] { 5, 4, 3, 5 }),

            // 勒索软件家族（前缀Ransomware.）
            ["Ransomware.Ryuk"] = (new HashSet<string> { "CryptEncrypt", "DeleteFile", "MoveFile", "AdjustTokenPrivileges" }, new[] { 5, 4, 3, 4 }),
            ["Ransomware.LockBit"] = (new HashSet<string> { "CryptGenKey", "RegDeleteValue", "MoveFileEx", "AdjustTokenPrivileges" }, new[] { 5, 3, 4, 4 }),
            ["Ransomware.DarkSide"] = (new HashSet<string> { "BCryptEncrypt", "CreateRemoteThread", "WriteProcessMemory", "MapViewOfFile" }, new[] { 5, 4, 4, 3 }),

            // 银行木马家族（前缀Banker.）
            ["Banker.Dridex"] = (new HashSet<string> { "InternetConnect", "HttpAddRequestHeaders", "WriteProcessMemory", "QueueUserAPC" }, new[] { 5, 4, 4, 5 }),
            ["Banker.IcedID"] = (new HashSet<string> { "InternetConnect", "HttpAddRequestHeaders", "VirtualProtect", "QueueUserAPC" }, new[] { 5, 4, 4, 5 }),
            ["Banker.Ursnif"] = (new HashSet<string> { "HttpSendRequest", "GetClipboardData", "GetKeyState", "ReadProcessMemory" }, new[] { 5, 4, 3, 4 }),

            // APT家族（前缀APT.）
            ["APT.Turla"] = (new HashSet<string> { "NtCreateThreadEx", "RtlCreateUserThread", "LdrLoadDll", "SuspendThread" }, new[] { 5, 5, 4, 4 }),
            ["APT.Carbanak"] = (new HashSet<string> { "CreateRemoteThread", "WriteProcessMemory", "InternetReadFile", "RegSetValue" }, new[] { 5, 4, 4, 3 }),
            ["APT.Lazarus"] = (new HashSet<string> { "NtAllocateVirtualMemory", "WriteProcessMemory", "CreateRemoteThread", "ZwUnmapViewOfSection" }, new[] { 5, 4, 5, 4 }),

            // 下载器家族（前缀Downloader.）
            ["Downloader.Hancitor"] = (new HashSet<string> { "URLDownloadToFile", "CreateRemoteThread", "VirtualAlloc", "LoadLibrary" }, new[] { 5, 4, 4, 4 }),
            ["Downloader.SmokeLoader"] = (new HashSet<string> { "CreateRemoteThread", "URLDownloadToFile", "RtlDecompressBuffer", "LdrLoadDll" }, new[] { 5, 4, 4, 4 }),
            ["Downloader.Gamarue"] = (new HashSet<string> { "HttpOpenRequest", "InternetReadFile", "CreateRemoteThread", "VirtualAlloc" }, new[] { 5, 4, 5, 4 }),

            // 蠕虫家族（前缀Worm.）
            ["Worm.Sality"] = (new HashSet<string> { "CreateRemoteThread", "WriteProcessMemory", "LoadLibrary", "GetProcAddress" }, new[] { 5, 4, 4, 5 }),
            ["Worm.Vawtrak"] = (new HashSet<string> { "HttpSendRequest", "ReadProcessMemory", "GetClipboardData", "InternetWriteFile" }, new[] { 5, 4, 4, 4 }),
            ["Worm.Kovter"] = (new HashSet<string> { "CreateProcess", "WriteFile", "RegSetValue", "ShellExecute" }, new[] { 5, 3, 4, 4 }),

            // 间谍软件家族（前缀Spyware.）
            ["Spyware.Keylogger"] = (new HashSet<string> { "GetAsyncKeyState", "GetWindowText", "SetWindowsHook", "CallNextHookEx" }, new[] { 5, 4, 4, 4 }),
            ["Spyware.DarkHotel"] = (new HashSet<string> { "NtQuerySystemInformation", "ReadProcessMemory", "HttpSendRequest" }, new[] { 5, 4, 4 }),

            // Rootkit家族（前缀Rootkit.）
            ["Rootkit.ZeroAccess"] = (new HashSet<string> { "NtCreateThreadEx", "ZwQuerySystemInformation", "RtlAdjustPrivilege" }, new[] { 5, 4, 5 }),
            ["Rootkit.TDSS"] = (new HashSet<string> { "ZwSetSystemInformation", "NtLoadDriver", "NtUnloadDriver" }, new[] { 5, 5, 5 }),

            // 后门家族（前缀Backdoor.）
            ["Backdoor.DarkComet"] = (new HashSet<string> { "CreateRemoteThread", "InternetConnect", "HttpSendRequest", "WriteProcessMemory" }, new[] { 5, 4, 4, 4 }),
            ["Backdoor.Gh0st"] = (new HashSet<string> { "VirtualAlloc", "CreateRemoteThread", "InternetReadFile" }, new[] { 4, 5, 4 }),

            // 信息窃取者家族（前缀Infostealer.）
            ["Infostealer.Redline"] = (new HashSet<string> { "InternetOpen", "HttpSendRequest", "GetAsyncKeyState", "ReadProcessMemory" }, new[] { 5, 4, 4, 4 }),
            ["Infostealer.Azorult"] = (new HashSet<string> { "CryptEncrypt", "HttpSendRequest", "SHGetFolderPath", "FindFirstFile" }, new[] { 5, 4, 4, 3 }),

            // 广告软件家族（前缀Adware.）
            ["Adware.Bundlore"] = (new HashSet<string> { "RegSetValue", "ShellExecute", "InternetConnect", "CreateProcess" }, new[] { 5, 4, 4, 4 }),
            ["Adware.MultiPlug"] = (new HashSet<string> { "CreateProcess", "InternetConnect", "SetWindowsHook" }, new[] { 5, 4, 4 }),

            // 漏洞利用工具家族（前缀Exploit.）
            ["Exploit.MS08-067"] = (new HashSet<string> { "CreateProcess", "DeviceIoControl", "NetUseAdd" }, new[] { 5, 5, 4 }),
            ["Exploit.EternalBlue"] = (new HashSet<string> { "DeviceIoControl", "NtCreateFile", "CreateRemoteThread" }, new[] { 5, 5, 5 }),
            ["Exploit.CobaltStrike"] = (new HashSet<string> { "NtCreateThreadEx", "VirtualAlloc", "HttpSendRequest" }, new[] { 5, 4, 4 }),
            ["Exploit.Metasploit"] = (new HashSet<string> { "GetProcAddress", "LoadLibrary", "CreateRemoteThread" }, new[] { 5, 4, 5 }),

            // 僵尸网络家族（前缀Botnet.）
            ["Botnet.Mirai"] = (new HashSet<string> { "WSAStartup", "connect", "send", "recv", "CreateProcess" }, new[] { 5, 4, 4, 4, 5 }),
            ["Botnet.DarkNexus"] = (new HashSet<string> { "InternetConnect", "HttpSendRequest", "CreateRemoteThread" }, new[] { 5, 4, 5 }),

            // 加密货币矿工家族（前缀Miner.）
            ["Miner.XMRig"] = (new HashSet<string> { "CreateProcess", "VirtualAlloc", "GetTickCount", "NtQuerySystemInformation" }, new[] { 5, 4, 3, 4 }),
            ["Miner.WannaMine"] = (new HashSet<string> { "CreateRemoteThread", "WriteProcessMemory", "AdjustTokenPrivileges" }, new[] { 5, 4, 4 }),

            // 远程访问木马（前缀RAT.）
            ["RAT.Quasar"] = (new HashSet<string> { "TcpClient.Connect", "NetworkStream.Write", "Process.Start" }, new[] { 5, 4, 4 }),
            ["RAT.NjRAT"] = (new HashSet<string> { "CreateRemoteThread", "InternetReadFile", "SetWindowsHook" }, new[] { 5, 4, 4 }),

            // 文件加密型勒索软件（前缀Locker.）
            ["Locker.Petya"] = (new HashSet<string> { "CryptEncrypt", "NtFsControlFile", "ZwWriteFile" }, new[] { 5, 5, 4 }),
            ["Locker.BadRabbit"] = (new HashSet<string> { "MoveFileEx", "AdjustTokenPrivileges", "CryptGenKey" }, new[] { 4, 4, 5 }),

            // 潜在不需要程序（前缀PUP.）
            ["PUP.BundleInstaller"] = (new HashSet<string> { "RegSetValue", "ShellExecute", "InternetConnect" }, new[] { 5, 4, 4 }),
            ["PUP.DriverBooster"] = (new HashSet<string> { "CreateService", "StartService", "DeleteFile" }, new[] { 5, 4, 3 }),
        };

    public static string Classify(HashSet<string> functions)
    {
        var funcSet = new HashSet<string>(functions);
        var scores = new Dictionary<string, int>();
        foreach (var family in Signatures)
        {
            int score = 0;
            int index = 0;
            // 加权评分系统（核心API权重5，辅助API权重3）
            foreach (var func in family.Value.Functions)
            {
                if (funcSet.Contains(func))
                {
                    score += family.Value.Weights[index];
                }
                index++;
            }
            scores[family.Key] = score;
        }
        // 动态阈值算法（基于家族特征权重总和）
        int threshold = scores.Any() ?
            (int)(scores.Values.Max() * 0.6) : // 至少匹配60%的核心特征
            3;
        return scores
            .Where(kv => kv.Value >= threshold)
            .OrderByDescending(kv => kv.Value)
            .Select(kv => kv.Key)
            .FirstOrDefault() ?? "Malware.Unsafe";
    }
}